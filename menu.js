// CODE_VERSION: ƒê·ªïi chu·ªói n√†y m·ªói l·∫ßn thay ƒë·ªïi code ƒë·ªÉ hi·ªÉn th·ªã version m·ªõi tr√™n menu
const CODE_VERSION = '2.0.0'; // v√≠ d·ª•: '2.0.0'

function renderMenu(active) {
    // X√≥a menu c≈© n·∫øu c√≥
    const oldMenu = document.querySelector('.navbar');
    if (oldMenu) oldMenu.remove();

    // L·∫•y t√™n c·ª≠a h√†ng
    const storeName = (localStorage.getItem('storeName') || '').trim();

    // Ki·ªÉm tra n·∫øu ch∆∞a t·ª´ng ch·ªçn phi√™n b·∫£n th·ªß c√¥ng (kh√¥ng c√≥ appVersionManual)
    let appVersionManual = localStorage.getItem('appVersionManual');
    let appVersion = localStorage.getItem('appVersion') || 'Free';

    // T·ª± ƒë·ªông g√°n phi√™n b·∫£n theo t√™n c·ª≠a h√†ng n·∫øu ch∆∞a t·ª´ng ch·ªçn th·ªß c√¥ng
    if (!appVersionManual) {
        if (storeName.toLowerCase() === 'lepshop') {
            appVersion = 'Pro';
            localStorage.setItem('appVersion', 'Pro');
        } else if (storeName.toLowerCase() === "h'farm" || storeName.toLowerCase() === "hfarm") {
            appVersion = 'Business';
            localStorage.setItem('appVersion', 'Business');
        } else {
            appVersion = 'Free';
            localStorage.setItem('appVersion', 'Free');
        }
    }

    // ƒê·ªãnh nghƒ©a m√†u cho t·ª´ng phi√™n b·∫£n
    const versionColors = {
        Free:   { menu: '#1976d2', label: '#1976d2' },
        Pro:    { menu: '#ec4899', label: '#ec4899' }, // h·ªìng c√°nh sen
        Business: { menu: '#2e7d32', label: '#2e7d32' }
    };

    // L·∫•y m√†u menu do ng∆∞·ªùi d√πng ch·ªçn (n·∫øu c√≥)
    let userMenuColor = localStorage.getItem('menuColor');
    // L·∫•y m√†u phi√™n b·∫£n do h·ªá th·ªëng ch·ªçn (menuVersionColor)
    let menuVersionColor = localStorage.getItem('menuVersionColor');

    // N·∫øu c√≥ menuVersionColor th√¨ ∆∞u ti√™n, n·∫øu kh√¥ng th√¨ d√πng menuColor, n·∫øu kh√¥ng th√¨ m·∫∑c ƒë·ªãnh theo phi√™n b·∫£n
    let menuColor, labelColor;
    if (menuVersionColor) {
        menuColor = menuVersionColor;
        labelColor = menuVersionColor;
    } else if (userMenuColor) {
        menuColor = userMenuColor;
        labelColor = userMenuColor;
    } else {
        menuColor = (versionColors[appVersion] || versionColors['Free']).menu;
        labelColor = (versionColors[appVersion] || versionColors['Free']).label;
    }

    // Lu√¥n c·∫≠p nh·∫≠t l·∫°i style khi renderMenu (x√≥a style c≈© n·∫øu c√≥)
    const oldStyle = document.getElementById('menu-style');
    if (oldStyle) oldStyle.remove();
    const style = document.createElement('style');
    style.id = 'menu-style';
    style.innerHTML = `
        .navbar {
            background: ${menuColor};
            color: #fff;
            padding: 0 32px;
            display: flex;
            align-items: center;
            min-height: 64px;
            gap: 0;
            box-shadow: 0 4px 16px #0001;
            border-bottom-left-radius: 18px;
            border-bottom-right-radius: 18px;
            position: relative;
            z-index: 10;
        }
        .navbar .navbar-logo {
            font-size: 22px;
            font-weight: bold;
            letter-spacing: 1.5px;
            color: #fff;
            margin-right: 32px;
            display: flex;
            align-items: center;
            gap: 8px;
            user-select: none;
        }
        .navbar .navbar-logo-icon {
            width: 32px;
            height: 32px;
            background: #fff2;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
        }
        .navbar .app-version-label {
            background: ${labelColor};
            font-size:13px;
            font-weight:600;
            color: #fff;
            border-radius:6px;
            padding:2px 8px;
            margin-left:8px;
            letter-spacing:1px;
            cursor:pointer;
            box-shadow: 0 2px 8px ${labelColor}33;
            border: 2px solid #fff5;
            transition: background 0.2s;
            display: inline-block;
            text-align: center;
        }
        .navbar .app-version-label:hover {
            filter: brightness(1.1);
        }
        .navbar .navbar-menu {
            display: flex;
            gap: 8px;
            flex: 1;
        }
        .navbar button {
            background: none;
            border: none;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
            padding: 10px 20px;
            border-radius: 8px;
            transition: background 0.18s, color 0.18s, box-shadow 0.18s;
            font-weight: 500;
            letter-spacing: 0.5px;
            margin: 0 2px;
            position: relative;
        }
        .navbar button.active, .navbar button:hover {
            background: #fff;
            color: #1976d2;
            box-shadow: 0 2px 8px #1976d233;
        }
        .navbar .menu-export-btn {
            background: #43a047;
            color: #fff;
            border: none;
            font-size: 16px;
            cursor: pointer;
            padding: 10px 18px;
            border-radius: 8px;
            margin-left: 16px;
            transition: background 0.18s, color 0.18s, box-shadow 0.18s;
            font-weight: 500;
            letter-spacing: 0.5px;
            display: inline-block;
            box-shadow: 0 2px 8px #43a04733;
        }
        .navbar .menu-export-btn:hover {
            background: #388e3c;
            color: #fff;
        }
        .navbar .menu-import-btn {
            background: #ff9800;
            color: #fff;
            border: none;
            font-size: 16px;
            cursor: pointer;
            padding: 10px 18px;
            border-radius: 8px;
            margin-left: 10px;
            transition: background 0.18s, color 0.18s, box-shadow 0.18s;
            font-weight: 500;
            letter-spacing: 0.5px;
            display: inline-block;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 8px #ff980033;
        }
        .navbar .menu-import-btn:hover {
            background: #fb8c00;
            color: #fff;
        }
        .navbar .menu-data-dropdown {
            position: relative;
            margin-left: 16px;
        }
        .navbar .menu-data-btn {
            background: #1565c0;
            color: #fff;
            border: none;
            font-size: 16px;
            cursor: pointer;
            padding: 10px 18px;
            border-radius: 8px;
            font-weight: 500;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: background 0.18s;
        }
        .navbar .menu-data-btn:hover,
        .navbar .menu-data-btn:focus {
            background: #1976d2;
        }
        .navbar .menu-data-list {
            display: none;
            position: absolute;
            top: 110%;
            right: 0;
            min-width: 180px;
            background: #fff;
            color: #1976d2;
            border-radius: 8px;
            box-shadow: 0 4px 16px #0002;
            z-index: 100;
            flex-direction: column;
            padding: 6px 0;
            animation: fadeInMenu 0.18s;
        }
        .navbar .menu-data-dropdown.open .menu-data-list {
            display: flex;
        }
        .navbar .menu-data-list button {
            background: none;
            border: none;
            color: #1976d2;
            font-size: 15px;
            text-align: left;
            width: 100%;
            padding: 10px 20px;
            border-radius: 0;
            margin: 0;
            transition: background 0.15s, color 0.15s;
            font-weight: 500;
        }
        .navbar .menu-data-list button:hover {
            background: #e3f2fd;
            color: #1565c0;
        }
        .navbar .menu-data-list .menu-import-btn {
            color: #ff9800;
        }
        .navbar .menu-data-list .menu-export-btn {
            color: #43a047;
        }
        .navbar .menu-data-list .menu-telegram-btn {
            color: #0088cc;
        }
        .navbar input[type="file"] {
            display: none;
        }
        @keyframes fadeInMenu {
            from { opacity: 0; transform: translateY(10px);}
            to { opacity: 1; transform: translateY(0);}
        }
        @media (max-width: 900px) {
            .navbar {
                flex-direction: column;
                align-items: flex-start;
                padding: 0 10px;
                min-height: unset;
            }
            .navbar .navbar-logo {
                margin: 10px 0 0 0;
            }
            .navbar .navbar-menu {
                flex-wrap: wrap;
                gap: 4px;
                margin-bottom: 8px;
            }
            .navbar .menu-export-btn, .navbar .menu-import-btn {
                margin-left: 0;
            }
            .navbar .menu-data-dropdown {
                margin-left: 0;
                margin-top: 8px;
            }
        }
        `;
    document.head.appendChild(style);

    // T·∫°o menu m·ªõi (hi·ªÉn th·ªã phi√™n b·∫£n nh∆∞ c≈©, n·∫±m c·∫°nh TimePro HRM)
    const nav = document.createElement('div');
    nav.className = 'navbar';
    nav.innerHTML = `
        <div class="navbar-logo" style="position:relative;">
            <span class="navbar-logo-icon">üïí</span>
            TimePro <span style="position:relative;display:inline-block;">
                HRM
                <span id="app-version-number" style="
                    position: absolute;
                    left: 85%;
                    top: -15px;
                    font-size: 11px;
                    color: #fff;
                    font-weight: bold;
                    letter-spacing: 0.5px;
                    background: none;
                    padding: 0;
                    border: none;
                    z-index: 2;
                    cursor: pointer;
                    text-decoration: underline dotted;
                    "
                    title="Xem l·ªãch s·ª≠ phi√™n b·∫£n"
                >
                    V${CODE_VERSION}
                </span>
            </span>
            <span id="app-version-label" class="app-version-label" title="Nh·∫•n ƒë·ªÉ nh·∫≠p Key">
                ${appVersion}
            </span>
        </div>
        <div class="navbar-menu">
            ${(() => {
                // Danh s√°ch menu m·∫∑c ƒë·ªãnh
                const defaultMenus = [
                    { id: 'index', label: 'Trang Ch·ªß', href: 'index.html' },
                    { id: 'emp', label: 'Danh s√°ch nh√¢n vi√™n', href: 'emp.html' },
                    { id: 'work_schedule', label: 'L·ªãch l√†m vi·ªác', href: 'work_schedule.html' },
                    { id: 'setup', label: 'Thi·∫øt L·∫≠p', href: 'setup.html' },
                    { id: 'att', label: 'Ch·∫•m c√¥ng', href: 'att.html' },
                    { id: 'payroll', label: 'B·∫£ng l∆∞∆°ng', href: 'payroll.html' },
                    { id: 'payroll_report', label: 'L·∫≠p BC L∆∞∆°ng', href: 'payroll_report.html' },
                    { id: 'about', label: 'Gi·ªõi thi·ªáu', href: 'about-mksof.html' }
                ];
                // L·∫•y c·∫•u h√¨nh menu t·ª´ localStorage
                let menuConfig = [];
                try {
                    menuConfig = JSON.parse(localStorage.getItem('menuConfig') || '[]');
                } catch {}
                let menus = menuConfig.length ? menuConfig : defaultMenus.map(m => ({...m, visible: true}));
                // ƒê·∫£m b·∫£o lu√¥n c√≥ ƒë·ªß c√°c menu m·∫∑c ƒë·ªãnh (n·∫øu thi·∫øu do c·∫≠p nh·∫≠t)
                defaultMenus.forEach(def => {
                    if (!menus.some(m => m.id === def.id)) menus.push({...def, visible: true});
                });
                // S·∫Øp x·∫øp l·∫°i ƒë√∫ng th·ª© t·ª± theo config
                menus = menus.filter(m => defaultMenus.some(d => d.id === m.id));
                // Render c√°c menu visible
                return menus.filter(m => m.visible !== false).map(m =>
                    `<button onclick="location.href='${m.href}'"${active===m.id?' class="active"':''}>${m.label}</button>`
                ).join('');
            })()}
        </div>
        <div class="menu-data-dropdown" tabindex="0">
            <button type="button" class="menu-data-btn" onclick="toggleMenuDataDropdown(event)">
                ‚ò∞ D·ªØ li·ªáu
            </button>
            <div class="menu-data-list">
                <button onclick="exportAllData()" class="menu-export-btn"${active==='export'?' class="active"':''}>Xu·∫•t d·ªØ li·ªáu</button>
                <button type="button" class="menu-import-btn" onclick="document.getElementById('importDataInput').click()">Nh·∫≠p d·ªØ li·ªáu</button>
                <input id="importDataInput" type="file" accept=".json" onchange="importAllData && importAllData(event)">
                <button type="button" class="menu-telegram-btn" onclick="sendAllDataToTelegramBot()">G·ª≠i d·ªØ li·ªáu v·ªÅ Bot</button>
                <button type="button" class="menu-setting-btn" onclick="showMenuSettingPopup()" style="color:#1976d2;">‚öôÔ∏è C√†i ƒë·∫∑t menu</button>
            </div>
        </div>
    `;
    // Th√™m menu v√†o ƒë·∫ßu body
    document.body.insertBefore(nav, document.body.firstChild);

    // Th√™m popup nh·∫≠p key n·∫øu ch∆∞a c√≥
    if (!document.getElementById('popup-key-overlay')) {
        const popupHtml = `
        <div id="popup-key-overlay" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:#0007; align-items:center; justify-content:center;">
            <div id="popup-key-box" style="background:#fff; border-radius:12px; box-shadow:0 8px 32px #0003; padding:32px 28px 24px 28px; min-width:320px; max-width:90vw; display:flex; flex-direction:column; align-items:center; position:relative;">
                <div style="font-size:20px; font-weight:600; color:#1976d2; margin-bottom:18px; letter-spacing:1px;">Nh·∫≠p Key n√¢ng c·∫•p phi√™n b·∫£n</div>
                <div style="display:flex; gap:8px; margin-bottom:14px;">
                    <button class="quick-key-btn" data-key="Free" style="background:#eee; color:#1976d2; border:none; border-radius:6px; padding:6px 14px; font-size:14px; font-weight:600; cursor:pointer;">Free</button>
                    <button class="quick-key-btn" data-key="22062002Pro" style="background:#eee; color:#1976d2; border:none; border-radius:6px; padding:6px 14px; font-size:14px; font-weight:600; cursor:pointer;">Pro</button>
                    <button class="quick-key-btn" data-key="22062002BUS" style="background:#eee; color:#1976d2; border:none; border-radius:6px; padding:6px 14px; font-size:14px; font-weight:600; cursor:pointer;">Business</button>
                </div>
                <input id="popup-key-input" type="text" placeholder="Nh·∫≠p key..." style="width:100%; font-size:16px; padding:10px 12px; border-radius:6px; border:1px solid #1976d2; outline:none; margin-bottom:18px;" />
                <div style="display:flex; gap:12px; width:100%; justify-content:center;">
                    <button id="popup-key-ok" style="background:#1976d2; color:#fff; border:none; border-radius:6px; padding:8px 22px; font-size:15px; font-weight:600; cursor:pointer; transition:background 0.18s;">X√°c nh·∫≠n</button>
                    <button id="popup-key-cancel" style="background:#eee; color:#1976d2; border:none; border-radius:6px; padding:8px 22px; font-size:15px; font-weight:600; cursor:pointer; transition:background 0.18s;">H·ªßy</button>
                </div>
                <span id="popup-key-msg" style="color:#d32f2f; font-size:13px; margin-top:10px; display:none;"></span>
                <span id="popup-key-close" style="position:absolute; top:8px; right:12px; font-size:20px; color:#888; cursor:pointer;" title="ƒê√≥ng">&times;</span>
            </div>
        </div>
        <div id="popup-success-overlay" style="display:none; position:fixed; z-index:10000; left:0; top:0; width:100vw; height:100vh; background:#0005; align-items:center; justify-content:center;">
            <div id="popup-success-box" style="background:#fff; border-radius:12px; box-shadow:0 8px 32px #0003; padding:28px 32px 22px 32px; min-width:280px; max-width:90vw; display:flex; flex-direction:column; align-items:center; position:relative;">
                <div style="font-size:22px; color:#43a047; margin-bottom:12px;">&#10003;</div>
                <div id="popup-success-msg" style="font-size:17px; color:#1976d2; font-weight:600; text-align:center; margin-bottom:10px;"></div>
                <button id="popup-success-ok" style="background:#1976d2; color:#fff; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer; transition:background 0.18s;">ƒê√≥ng</button>
                <span id="popup-success-close" style="position:absolute; top:8px; right:12px; font-size:20px; color:#888; cursor:pointer;" title="ƒê√≥ng">&times;</span>
            </div>
        </div>
        <div id="popup-version-history-overlay" style="display:none; position:fixed; z-index:10001; left:0; top:0; width:100vw; height:100vh; background:#0007; align-items:center; justify-content:center;">
            <div id="popup-version-history-box" style="background:#fff; border-radius:12px; box-shadow:0 8px 32px #0003; padding:28px 32px 22px 32px; min-width:320px; max-width:95vw; display:flex; flex-direction:column; align-items:center; position:relative;">
                <div style="font-size:20px; font-weight:600; color:#1976d2; margin-bottom:18px; letter-spacing:1px;">L·ªãch s·ª≠ c√°c phi√™n b·∫£n</div>
                <div id="popup-version-history-content" style="width:100%; max-height:55vh; overflow-y:auto; font-size:15px; color:#333; text-align:left;">
                    <!-- N·ªôi dung l·ªãch s·ª≠ s·∫Ω ƒë∆∞·ª£c render ·ªü ƒë√¢y -->
                </div>
                <button id="popup-version-history-ok" style="background:#1976d2; color:#fff; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer; margin-top:18px; transition:background 0.18s;">ƒê√≥ng</button>
                <span id="popup-version-history-close" style="position:absolute; top:8px; right:12px; font-size:20px; color:#888; cursor:pointer;" title="ƒê√≥ng">&times;</span>
            </div>
        </div>
        `;
        const div = document.createElement('div');
        div.innerHTML = popupHtml;
        // Ch·ªâ append n·∫øu c√≤n ph·∫ßn t·ª≠ con
        while (div.firstElementChild) {
            if (div.firstElementChild) {
                document.body.appendChild(div.firstElementChild);
            } else {
                break;
            }
        }
    }

    // B·ªé popup QR Checkin n·∫øu ch∆∞a c√≥
    // if (!document.getElementById('popup-qr-checkin-overlay')) {
    //     const qrPopupHtml = `
    //     <div id="popup-qr-checkin-overlay" style="display:none; position:fixed; z-index:10010; left:0; top:0; width:100vw; height:100vh; background:#0007; align-items:center; justify-content:center;">
    //         <div id="popup-qr-checkin-box" style="background:#fff; border-radius:12px; box-shadow:0 8px 32px #0003; padding:28px 24px 22px 24px; min-width:320px; max-width:95vw; display:flex; flex-direction:column; align-items:center; position:relative;">
    //             <div style="font-size:20px; font-weight:600; color:#1976d2; margin-bottom:12px;">Ch·∫•m C√¥ng B·∫±ng M√£ QR</div>
    //             <div id="qr-reader" style="width:320px; height:240px; background:#eee; border-radius:8px; display:flex; align-items:center; justify-content:center; margin-bottom:12px;">
    //                 <span style="color:#888;">[Camera QR s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y]</span>
    //             </div>
    //             <div id="qr-result" style="font-size:15px; color:#43a047; margin-bottom:10px;"></div>
    //             <button id="popup-qr-checkin-close" style="background:#eee; color:#1976d2; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer; transition:background 0.18s;">ƒê√≥ng</button>
    //         </div>
    //     </div>
    //     `;
    //     const div = document.createElement('div');
    //     div.innerHTML = qrPopupHtml;
    //     document.body.appendChild(div.firstElementChild);
    // }

    // X√ìA popup l·ªãch s·ª≠ thao t√°c v√† c√°c h√†m li√™n quan
    // X√ìA window.addHistoryLog, window.showHistoryLogPopup, setupAutoHistoryLog, popup-history-log-overlay

    // H√†m ghi log thao t√°c (ghi l·∫°i m·ªçi thao t√°c, ch·ªâ l∆∞u local, kh√¥ng g·ª≠i bot)
    window.addHistoryLog = function(action, detail) {
        const logs = JSON.parse(localStorage.getItem('historyLogs') || '[]');
        const user = localStorage.getItem('currentUser') || '·∫®n danh';
        logs.unshift({
            time: new Date().toLocaleString(),
            user,
            action,
            detail
        });
        // Gi·ªõi h·∫°n t·ªëi ƒëa 2000 d√≤ng log
        if (logs.length > 2000) logs.length = 2000;
        localStorage.setItem('historyLogs', JSON.stringify(logs));
    };

    // Ghi l·∫°i thao t√°c v√†o ph·∫ßn m·ªÅm (v√†o ph·∫ßn m·ªÅm, chuy·ªÉn tab, m·ªü popup, ch·∫•m c√¥ng, xu·∫•t/nh·∫≠p d·ªØ li·ªáu, v.v.)
    (function setupAutoHistoryLog() {
        // Ghi l·∫°i l·∫ßn ƒë·∫ßu v√†o ph·∫ßn m·ªÅm
        if (!sessionStorage.getItem('loggedThisSession')) {
            window.addHistoryLog('ƒêƒÉng nh·∫≠p/Truy c·∫≠p', 'V√†o ph·∫ßn m·ªÅm l√∫c ' + new Date().toLocaleString());
            sessionStorage.setItem('loggedThisSession', '1');
        }
        // Ghi l·∫°i chuy·ªÉn tab menu
        document.addEventListener('click', function(e) {
            const btn = e.target.closest('.navbar-menu button');
            if (btn) {
                window.addHistoryLog('Chuy·ªÉn tab', btn.textContent.trim());
            }
        }, true);
        // Ghi l·∫°i m·ªü popup l·ªãch s·ª≠ phi√™n b·∫£n
        document.addEventListener('click', function(e) {
            if (e.target && e.target.id === 'app-version-number') {
                window.addHistoryLog('Xem l·ªãch s·ª≠ phi√™n b·∫£n', '');
            }
        }, true);
        // Ghi l·∫°i m·ªü popup nh·∫≠p key
        document.addEventListener('click', function(e) {
            if (e.target && e.target.id === 'app-version-label') {
                window.addHistoryLog('M·ªü popup nh·∫≠p key', '');
            }
        }, true);
        // Ghi l·∫°i m·ªü popup l·ªãch s·ª≠ thao t√°c
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('menu-history-btn')) {
                window.addHistoryLog('Xem l·ªãch s·ª≠ thao t√°c', '');
            }
        }, true);
        // Ghi l·∫°i xu·∫•t d·ªØ li·ªáu
        window.exportAllData = (function(orig) {
            return function() {
                window.addHistoryLog('Xu·∫•t d·ªØ li·ªáu', 'Xu·∫•t to√†n b·ªô d·ªØ li·ªáu ra file');
                if (orig) orig.apply(this, arguments);
            };
        })(window.exportAllData);
        // Ghi l·∫°i nh·∫≠p d·ªØ li·ªáu
        window.importAllData = (function(orig) {
            return function() {
                window.addHistoryLog('Nh·∫≠p d·ªØ li·ªáu', 'Nh·∫≠p d·ªØ li·ªáu t·ª´ file');
                if (orig) orig.apply(this, arguments);
            };
        })(window.importAllData);
        // Ghi l·∫°i g·ª≠i d·ªØ li·ªáu v·ªÅ bot
        window.sendAllDataToTelegramBot = (function(orig) {
            return function() {
                window.addHistoryLog('G·ª≠i d·ªØ li·ªáu v·ªÅ Bot', '');
                if (orig) orig.apply(this, arguments);
            };
        })(window.sendAllDataToTelegramBot);
        // Ghi l·∫°i m·ªü c√°c popup kh√°c n·∫øu mu·ªën...
    })();

    // H√†m hi·ªÉn th·ªã popup l·ªãch s·ª≠ thao t√°c
    window.showHistoryLogPopup = function() {
        const overlay = document.getElementById('popup-history-log-overlay');
        const content = document.getElementById('popup-history-log-content');
        const logs = JSON.parse(localStorage.getItem('historyLogs') || '[]');
        if (logs.length === 0) {
            content.innerHTML = '<div style="color:#888; text-align:center; padding:24px 0;">Ch∆∞a c√≥ l·ªãch s·ª≠ thao t√°c n√†o.</div>';
        } else {
            content.innerHTML = logs.map(log =>
                `<div style="padding:7px 18px; border-bottom:1px solid #e3eaf2;">
                    <div style="font-size:13px; color:#1976d2; font-weight:600;">${log.time} - ${log.user}</div>
                    <div style="margin-left:8px; margin-top:2px;"><b>${log.action}</b> ${log.detail ? ('- ' + log.detail) : ''}</div>
                </div>`
            ).join('');
        }
        overlay.style.display = 'flex';
        document.getElementById('popup-history-log-ok').onclick = function() {
            overlay.style.display = 'none';
        };
        document.getElementById('popup-history-log-close').onclick = function() {
            overlay.style.display = 'none';
        };
        overlay.onkeydown = function(e) {
            if (e.key === 'Escape') overlay.style.display = 'none';
        };
        setTimeout(() => {
            document.getElementById('popup-history-log-ok').focus();
        }, 100);
    };

    // H√†m m·ªü popup th√¥ng b√°o th√†nh c√¥ng
    function showSuccessPopup(msg) {
        const overlay = document.getElementById('popup-success-overlay');
        const msgDiv = document.getElementById('popup-success-msg');
        // S·ª≠a l·ªói: N·∫øu overlay ho·∫∑c msgDiv ch∆∞a t·ªìn t·∫°i, kh√¥ng l√†m g√¨
        if (!overlay || !msgDiv) return;
        msgDiv.textContent = msg;
        overlay.style.display = 'flex';
        document.getElementById('popup-success-ok').onclick = function() {
            overlay.style.display = 'none';
        };
        document.getElementById('popup-success-close').onclick = function() {
            overlay.style.display = 'none';
        };
        overlay.onkeydown = function(e) {
            if (e.key === 'Escape') overlay.style.display = 'none';
        };
        setTimeout(() => {
            const okBtn = document.getElementById('popup-success-ok');
            if (okBtn) okBtn.focus();
        }, 100);
    }

    // H√†m m·ªü popup nh·∫≠p key
    function showKeyPopup() {
        const overlay = document.getElementById('popup-key-overlay');
        const input = document.getElementById('popup-key-input');
        const msg = document.getElementById('popup-key-msg');
        overlay.style.display = 'flex';
        input.value = '';
        msg.style.display = 'none';
        msg.textContent = '';
        input.focus();

        // X√°c nh·∫≠n key
        document.getElementById('popup-key-ok').onclick = function() {
            const key = input.value.trim();
            if (!key) {
                msg.textContent = 'Vui l√≤ng nh·∫≠p key!';
                msg.style.display = 'block';
                input.focus();
                return;
            }
            function setVersion(version, msgText) {
                localStorage.setItem('appVersion', version);
                localStorage.setItem('appVersionManual', '1');
                // ƒê·ªïi m√†u menu theo phi√™n b·∫£n ngay l·∫≠p t·ª©c
                localStorage.setItem('menuVersionColor', versionColors[version].menu);
                // Khi ch·ªçn phi√™n b·∫£n, b·ªè ch·ªçn m√†u th·ªß c√¥ng (menuColor) ƒë·ªÉ ∆∞u ti√™n m√†u phi√™n b·∫£n
                localStorage.removeItem('menuColor');
                overlay.style.display = 'none';
                showSuccessPopup(msgText);
                // T·ª± ƒë·ªông F5 l·∫°i trang sau khi ch·ªçn phi√™n b·∫£n
                setTimeout(() => {
                    location.reload();
                }, 600);
            }
            if (key === '22062002Pro') {
                setVersion('Pro', 'ƒê√£ n√¢ng c·∫•p l√™n phi√™n b·∫£n Pro!');
            } else if (key === '22062002BUS') {
                setVersion('Business', 'ƒê√£ n√¢ng c·∫•p l√™n phi√™n b·∫£n Business!');
            } else if (key === 'Free') {
                setVersion('Free', 'ƒê√£ chuy·ªÉn v·ªÅ phi√™n b·∫£n Free!');
            } else {
                msg.textContent = 'Key kh√¥ng h·ª£p l·ªá!';
                msg.style.display = 'block';
                input.focus();
            }
        };
        // H·ªßy
        document.getElementById('popup-key-cancel').onclick = function() {
            overlay.style.display = 'none';
        };
        // ƒê√≥ng b·∫±ng d·∫•u X
        document.getElementById('popup-key-close').onclick = function() {
            overlay.style.display = 'none';
        };
        // ƒê√≥ng b·∫±ng ph√≠m ESC
        overlay.onkeydown = function(e) {
            if (e.key === 'Escape') overlay.style.display = 'none';
        };
        // Cho ph√©p Enter ƒë·ªÉ x√°c nh·∫≠n
        input.onkeydown = function(e) {
            if (e.key === 'Enter') document.getElementById('popup-key-ok').click();
        };
        // Th√™m s·ª± ki·ªán cho c√°c n√∫t key m·∫´u
        overlay.querySelectorAll('.quick-key-btn').forEach(btn => {
            btn.onclick = function() {
                input.value = btn.getAttribute('data-key');
                document.getElementById('popup-key-ok').click();
            };
        });
    }

    // Th√™m h√†m hi·ªÉn th·ªã popup l·ªãch s·ª≠ phi√™n b·∫£n
    function showVersionHistoryPopup() {
        const overlay = document.getElementById('popup-version-history-overlay');
        const content = document.getElementById('popup-version-history-content');
        // Danh s√°ch l·ªãch s·ª≠ phi√™n b·∫£n (t·ª´ 1.0.0 ƒë·∫øn 2.0.0, m·ªói b·∫£n m·ªôt c·∫£i ti·∫øn)
        const history = [
            {
                version: '2.0.0',
                date: '15/6/2025',
                note: 'N√¢ng c·∫•p l√™n V2: Th√™m t√≠nh nƒÉng Ch·∫•m C√¥ng B·∫±ng M√£ QR v√† tinh ch·ªânh danh s√°ch nh√¢n vi√™n ƒëa nƒÉng.'
            },
            {
                version: '1.1.5',
                date: '10/6/2025',
                note: 'Th√™m popup l·ªãch s·ª≠ phi√™n b·∫£n khi nh·∫•n v√†o s·ªë version.'
            },
            {
                version: '1.1.4',
                date: '5/6/2025',
                note: 'C·∫£i thi·ªán t·ªëc ƒë·ªô xu·∫•t d·ªØ li·ªáu v√† s·ª≠a l·ªói nh·ªè giao di·ªán.'
            },
            {
                version: '1.1.3',
                date: '30/5/2025',
                note: 'Th√™m ch·ª©c nƒÉng g·ª≠i d·ªØ li·ªáu v·ªÅ Telegram Bot.'
            },
            {
                version: '1.1.2',
                date: '25/5/2025',
                note: 'B·ªï sung xu·∫•t l·ªãch l√†m vi·ªác v√† ca m·∫´u l·ªãch l√†m vi·ªác v√†o d·ªØ li·ªáu xu·∫•t file.'
            },
            {
                version: '1.1.1',
                date: '20/5/2025',
                note: 'T·ªëi ∆∞u popup nh·∫≠p key v√† giao di·ªán menu.'
            },
            {
                version: '1.1.0',
                date: '15/5/2025',
                note: 'Th√™m popup nh·∫≠p key n√¢ng c·∫•p phi√™n b·∫£n (Free/Pro/Business).'
            },
            {
                version: '1.0.9',
                date: '10/5/2025',
                note: 'Th√™m ch·ª©c nƒÉng nh·∫≠p/xu·∫•t to√†n b·ªô d·ªØ li·ªáu (JSON).'
            },
            {
                version: '1.0.8',
                date: '7/5/2025',
                note: 'Th√™m ch·ª©c nƒÉng ghi ch√∫ c√° nh√¢n cho t·ª´ng nh√¢n vi√™n.'
            },
            {
                version: '1.0.7',
                date: '5/5/2025',
                note: 'Th√™m ch·ª©c nƒÉng l·∫≠p b√°o c√°o l∆∞∆°ng t·ªïng h·ª£p theo th√°ng.'
            },
            {
                version: '1.0.6',
                date: '3/5/2025',
                note: 'Th√™m ch·ª©c nƒÉng b·∫£ng l∆∞∆°ng chi ti·∫øt t·ª´ng nh√¢n vi√™n.'
            },
            {
                version: '1.0.5',
                date: '2/5/2025',
                note: 'Th√™m ch·ª©c nƒÉng ch·∫•m c√¥ng theo ca v√† l·ªãch l√†m vi·ªác.'
            },
            {
                version: '1.0.4',
                date: '1/5/2025',
                note: 'Th√™m ch·ª©c nƒÉng thi·∫øt l·∫≠p ca l√†m vi·ªác v√† l·ªãch l√†m vi·ªác tu·∫ßn.'
            },
            {
                version: '1.0.3',
                date: '30/4/2025',
                note: 'Th√™m ch·ª©c nƒÉng qu·∫£n l√Ω danh s√°ch nh√¢n vi√™n.'
            },
            {
                version: '1.0.2',
                date: '28/4/2025',
                note: 'Th√™m giao di·ªán menu m·ªõi v√† t·ªëi ∆∞u tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.'
            },
            {
                version: '1.0.1',
                date: '25/4/2025',
                note: 'Th√™m ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p v√† ph√¢n quy·ªÅn c∆° b·∫£n.'
            },
            {
                version: '1.0.0',
                date: '20/4/2025',
                note: 'Ra m·∫Øt phi√™n b·∫£n ƒë·∫ßu ti√™n v·ªõi c√°c ch·ª©c nƒÉng c∆° b·∫£n: ch·∫•m c√¥ng, xem danh s√°ch nh√¢n vi√™n, xu·∫•t d·ªØ li·ªáu.'
            }
        ];
        // L·∫•y version hi·ªán t·∫°i
        let currentVersion = CODE_VERSION;
        // N·∫øu ƒë√£ t·ª´ng chuy·ªÉn version th·ªß c√¥ng th√¨ l·∫•y version ƒë√≥ ƒë·ªÉ hi·ªÉn th·ªã
        if (localStorage.getItem('selectedCodeVersion')) {
            currentVersion = localStorage.getItem('selectedCodeVersion');
        }
        content.innerHTML = history.map(h =>
            `<div style="margin-bottom:12px;">
                <b style="color:#1976d2;">V${h.version}</b>
                <span style="color:#888; font-size:13px; margin-left:8px;">(${h.date})</span>
                <div style="margin-left:12px; margin-top:2px;">- ${h.note}</div>
                ${h.version === currentVersion ? `<span style="margin-left:12px; color:#43a047; font-size:13px;">(ƒêang d√πng)</span>` : ''}
            </div>`
        ).join('') +
        `<div style="margin-top:18px; text-align:center;">
            <button id="btn-check-update" style="background:#1976d2; color:#fff; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer; transition:background 0.18s;">
                Ki·ªÉm tra c·∫≠p nh·∫≠t
            </button>
            <span id="check-update-msg" style="display:inline-block; margin-left:12px; color:#1976d2; font-size:14px;"></span>
        </div>`;
        overlay.style.display = 'flex';

        // B·ªè s·ª± ki·ªán chuy·ªÉn v·ªÅ b·∫£n kh√°c

        // S·ª± ki·ªán ki·ªÉm tra c·∫≠p nh·∫≠t
        document.getElementById('btn-check-update').onclick = function() {
            const msg = document.getElementById('check-update-msg');
            msg.textContent = 'ƒêang ki·ªÉm tra...';
            setTimeout(() => {
                if (currentVersion === history[0].version) {
                    msg.textContent = 'B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t!';
                } else {
                    msg.innerHTML = `C√≥ phi√™n b·∫£n m·ªõi: V${history[0].version}. <button id="btn-update-now" style="background:#43a047; color:#fff; border:none; border-radius:5px; padding:3px 12px; font-size:13px; cursor:pointer; margin-left:8px;">C·∫≠p nh·∫≠t ngay</button>`;
                    document.getElementById('btn-update-now').onclick = function() {
                        localStorage.setItem('selectedCodeVersion', history[0].version);
                        showSuccessPopup('ƒê√£ c·∫≠p nh·∫≠t l√™n phi√™n b·∫£n m·ªõi nh·∫•t V' + history[0].version + '. ƒêang c·∫≠p nh·∫≠t l·∫°i giao di·ªán...');
                        setTimeout(() => {
                            renderMenu(window._lastActiveMenu || 'index');
                        }, 600);
                    };
                }
            }, 900);
        };

        document.getElementById('popup-version-history-ok').onclick = function() {
            overlay.style.display = 'none';
        };
        document.getElementById('popup-version-history-close').onclick = function() {
            overlay.style.display = 'none';
        };
        overlay.onkeydown = function(e) {
            if (e.key === 'Escape') overlay.style.display = 'none';
        };
        setTimeout(() => {
            document.getElementById('popup-version-history-ok').focus();
        }, 100);
    }

    // Th√™m h√†m m·ªü popup QR Checkin
    // function showQRCheckinPopup() {
    //     const overlay = document.getElementById('popup-qr-checkin-overlay');
    //     const qrReader = document.getElementById('qr-reader');
    //     const qrResult = document.getElementById('qr-result');
    //     if (!overlay) return;
    //     overlay.style.display = 'flex';
    //     qrResult.textContent = '';
    //     // TODO: T√≠ch h·ª£p th∆∞ vi·ªán qu√©t QR t·∫°i ƒë√¢y (v√≠ d·ª• html5-qrcode ho·∫∑c jsQR)
    //     // Hi·ªán t·∫°i ch·ªâ l√† demo khung, b·∫°n s·∫Ω t√≠ch h·ª£p sau
    //     qrReader.innerHTML = '<span style="color:#888;">[Camera QR s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y]</span>';
    //     // ƒê√≥ng popup
    //     document.getElementById('popup-qr-checkin-close').onclick = function() {
    //         overlay.style.display = 'none';
    //         // TODO: D·ª´ng camera n·∫øu c√≥
    //     };
    //     overlay.onkeydown = function(e) {
    //         if (e.key === 'Escape') overlay.style.display = 'none';
    //     };
    //     // Ghi log m·ªü popup QR
    //     window.addHistoryLog && window.addHistoryLog('M·ªü popup Ch·∫•m c√¥ng QR', '');
    // }

    // G·ª£i √Ω c√°c h√†m ƒëa nƒÉng cho danh s√°ch nh√¢n vi√™n (b·∫°n s·∫Ω x·ª≠ l√Ω chi ti·∫øt ·ªü emp.html)
    // window.searchEmployee = function() {
    //     window.addHistoryLog && window.addHistoryLog('T√¨m ki·∫øm nh√¢n vi√™n', '');
    //     alert('T√≠nh nƒÉng t√¨m ki·∫øm s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü emp.html!');
    // };
    // window.exportEmployeeExcel = function() {
    //     window.addHistoryLog && window.addHistoryLog('Xu·∫•t Excel nh√¢n vi√™n', '');
    //     alert('T√≠nh nƒÉng xu·∫•t Excel s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü emp.html!');
    // };
    // window.quickAddEmployee = function() {
    //     window.addHistoryLog && window.addHistoryLog('Th√™m nhanh nh√¢n vi√™n', '');
    //     alert('T√≠nh nƒÉng th√™m nhanh s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü emp.html!');
    // };

    // Th√™m popup c√†i ƒë·∫∑t menu n·∫øu ch∆∞a c√≥
    if (!document.getElementById('popup-menu-setting-overlay')) {
        const popupMenuSettingHtml = `
        <div id="popup-menu-setting-overlay" style="display:none; position:fixed; z-index:10010; left:0; top:0; width:100vw; height:100vh; background:#0007; align-items:center; justify-content:center;">
            <div id="popup-menu-setting-box" style="background:#fff; border-radius:12px; box-shadow:0 8px 32px #0003; padding:28px 24px 22px 24px; min-width:340px; max-width:95vw; display:flex; flex-direction:column; align-items:center; position:relative;">
                <div style="font-size:18px; font-weight:600; color:#1976d2; margin-bottom:12px;">C√†i ƒë·∫∑t menu</div>
                <div id="menu-setting-list" style="width:100%; max-height:50vh; overflow-y:auto; margin-bottom:16px;">
                    <!-- Danh s√°ch menu s·∫Ω render ·ªü ƒë√¢y -->
                </div>
                <div style="display:flex; gap:12px; width:100%; justify-content:center;">
                    <button id="popup-menu-setting-ok" style="background:#1976d2; color:#fff; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer;">L∆∞u</button>
                    <button id="popup-menu-setting-cancel" style="background:#eee; color:#1976d2; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer;">H·ªßy</button>
                </div>
                <span id="popup-menu-setting-close" style="position:absolute; top:8px; right:12px; font-size:20px; color:#888; cursor:pointer;" title="ƒê√≥ng">&times;</span>
                <div style="font-size:13px; color:#888; margin-top:10px;">K√©o th·∫£ ƒë·ªÉ ƒë·ªïi v·ªã tr√≠, tick ƒë·ªÉ ·∫©n/hi·ªán menu</div>
            </div>
        </div>
        `;
        const div = document.createElement('div');
        div.innerHTML = popupMenuSettingHtml;
        document.body.appendChild(div.firstElementChild);
    }

    // Th√™m h√†m hi·ªÉn th·ªã popup c√†i ƒë·∫∑t menu
    function showMenuSettingPopup() {
        const overlay = document.getElementById('popup-menu-setting-overlay');
        const listDiv = document.getElementById('menu-setting-list');
        // Danh s√°ch menu m·∫∑c ƒë·ªãnh
        const defaultMenus = [
            { id: 'index', label: 'Trang Ch·ªß', href: 'index.html' },
            { id: 'emp', label: 'Danh s√°ch nh√¢n vi√™n', href: 'emp.html' },
            { id: 'work_schedule', label: 'L·ªãch l√†m vi·ªác', href: 'work_schedule.html' },
            { id: 'setup', label: 'Thi·∫øt L·∫≠p', href: 'setup.html' },
            { id: 'att', label: 'Ch·∫•m c√¥ng', href: 'att.html' },
            { id: 'payroll', label: 'B·∫£ng l∆∞∆°ng', href: 'payroll.html' },
            { id: 'payroll_report', label: 'L·∫≠p BC L∆∞∆°ng', href: 'payroll_report.html' },
            { id: 'about', label: 'Gi·ªõi thi·ªáu', href: 'about-mksof.html' }
        ];
        // L·∫•y c·∫•u h√¨nh menu t·ª´ localStorage
        let menuConfig = [];
        try {
            menuConfig = JSON.parse(localStorage.getItem('menuConfig') || '[]');
        } catch {}
        // ƒê∆∞a bi·∫øn menus ra ngo√†i ƒë·ªÉ gi·ªØ tr·∫°ng th√°i khi k√©o th·∫£
        let menus = menuConfig.length ? menuConfig : defaultMenus.map(m => ({...m, visible: true}));
        defaultMenus.forEach(def => {
            if (!menus.some(m => m.id === def.id)) menus.push({...def, visible: true});
        });
        menus = menus.filter(m => defaultMenus.some(d => d.id === m.id));

        // H√†m render l·∫°i danh s√°ch menu trong popup (kh√¥ng g·ªçi l·∫°i showMenuSettingPopup)
        function renderMenuSettingList() {
            listDiv.innerHTML = menus.map((m, idx) => `
                <div class="menu-setting-item" draggable="true" data-idx="${idx}" style="display:flex;align-items:center;gap:10px;padding:7px 0;cursor:grab;border-bottom:1px solid #eee;">
                    <span style="font-size:18px;cursor:grab;">&#9776;</span>
                    <input type="checkbox" class="menu-setting-visible" data-idx="${idx}" ${m.visible!==false?'checked':''} style="accent-color:#1976d2;">
                    <span style="flex:1;">${m.label}</span>
                </div>
            `).join('');

            // K√©o th·∫£ ƒë·ªïi v·ªã tr√≠
            let dragIdx = null;
            let dragOverIdx = null;
            listDiv.querySelectorAll('.menu-setting-item').forEach(item => {
                item.ondragstart = function(e) {
                    dragIdx = Number(item.getAttribute('data-idx'));
                    e.dataTransfer.effectAllowed = 'move';
                    item.style.opacity = '0.5';
                };
                item.ondragend = function() {
                    dragIdx = null;
                    dragOverIdx = null;
                    listDiv.querySelectorAll('.menu-setting-item').forEach(i => i.style.background = '');
                    item.style.opacity = '';
                };
                item.ondragover = function(e) {
                    e.preventDefault();
                    dragOverIdx = Number(item.getAttribute('data-idx'));
                    listDiv.querySelectorAll('.menu-setting-item').forEach(i => i.style.background = '');
                    item.style.background = '#e3f2fd';
                };
                item.ondragleave = function() {
                    item.style.background = '';
                };
                item.ondrop = function(e) {
                    e.preventDefault();
                    item.style.background = '';
                    const dropIdx = Number(item.getAttribute('data-idx'));
                    if (dragIdx !== null && dragIdx !== dropIdx) {
                        const moved = menus.splice(dragIdx, 1)[0];
                        menus.splice(dropIdx, 0, moved);
                        renderMenuSettingList(); // ch·ªâ render l·∫°i danh s√°ch, kh√¥ng g·ªçi l·∫°i popup
                    }
                };
            });

            // Tick ·∫©n/hi·ªán
            listDiv.querySelectorAll('.menu-setting-visible').forEach(cb => {
                cb.onchange = function() {
                    const idx = Number(cb.getAttribute('data-idx'));
                    menus[idx].visible = cb.checked;
                };
            });
        }

        renderMenuSettingList();
        overlay.style.display = 'flex';

        // L∆∞u
        document.getElementById('popup-menu-setting-ok').onclick = function() {
            localStorage.setItem('menuConfig', JSON.stringify(menus));
            overlay.style.display = 'none';
            renderMenu(window._lastActiveMenu || 'index');
        };
        // H·ªßy
        document.getElementById('popup-menu-setting-cancel').onclick = function() {
            overlay.style.display = 'none';
        };
        // ƒê√≥ng b·∫±ng d·∫•u X
        document.getElementById('popup-menu-setting-close').onclick = function() {
            overlay.style.display = 'none';
        };
        // ƒê√≥ng b·∫±ng ph√≠m ESC
        overlay.onkeydown = function(e) {
            if (e.key === 'Escape') overlay.style.display = 'none';
        };
        setTimeout(() => {
            document.getElementById('popup-menu-setting-ok').focus();
        }, 100);
    }

    // G√°n s·ª± ki·ªán click cho label phi√™n b·∫£n
    document.getElementById('app-version-label').onclick = showKeyPopup;

    // G√°n s·ª± ki·ªán click cho s·ªë version ƒë·ªÉ m·ªü popup l·ªãch s·ª≠ phi√™n b·∫£n
    document.getElementById('app-version-number').onclick = showVersionHistoryPopup;

    // G·ª£i √Ω tinh ch·ªânh menu nh√¢n vi√™n ƒëa nƒÉng (b·∫°n s·∫Ω x·ª≠ l√Ω chi ti·∫øt ·ªü emp.html)
    // if (active === 'emp') {
    //     setTimeout(() => {
    //         const empMenu = document.querySelector('.navbar-menu');
    //         if (empMenu && !document.getElementById('emp-quick-actions')) {
    //             const div = document.createElement('div');
    //             div.id = 'emp-quick-actions';
    //             div.style.display = 'flex';
    //             div.style.gap = '8px';
    //             div.style.marginLeft = '16px';
    //             div.innerHTML = `
    //                 <button onclick="searchEmployee()" style="background:#fff; color:#1976d2; border:1px solid #1976d2; border-radius:6px; padding:6px 14px; font-size:14px; font-weight:600; cursor:pointer;">T√¨m ki·∫øm</button>
    //                 <button onclick="exportEmployeeExcel()" style="background:#fff; color:#43a047; border:1px solid #43a047; border-radius:6px; padding:6px 14px; font-size:14px; font-weight:600; cursor:pointer;">Xu·∫•t Excel</button>
    //                 <button onclick="quickAddEmployee()" style="background:#fff; color:#ff9800; border:1px solid #ff9800; border-radius:6px; padding:6px 14px; font-size:14px; font-weight:600; cursor:pointer;">Th√™m nhanh</button>
    //             `;
    //             empMenu.appendChild(div);
    //         }
    //     }, 300);
    // }

    // L∆∞u l·∫°i menu ƒëang active ƒë·ªÉ render l·∫°i ƒë√∫ng tab khi ƒë·ªïi version
    window._lastActiveMenu = active;

    // Khi renderMenu, n·∫øu c√≥ selectedCodeVersion th√¨ c·∫≠p nh·∫≠t l·∫°i s·ªë version hi·ªÉn th·ªã
    const selectedCodeVersion = localStorage.getItem('selectedCodeVersion');
    if (selectedCodeVersion && selectedCodeVersion !== CODE_VERSION) {
        const versionNumberEl = document.getElementById('app-version-number');
        if (versionNumberEl) versionNumberEl.textContent = 'V' + selectedCodeVersion;
    }

    // ƒê√≥ng dropdown khi click ngo√†i ho·∫∑c chuy·ªÉn tab
    document.querySelectorAll('.menu-data-dropdown').forEach(drop => {
        drop.addEventListener('blur', function() {
            setTimeout(() => drop.classList.remove('open'), 120);
        });
    });
}

// Th√™m h√†m toggle dropdown
function toggleMenuDataDropdown(e) {
    e.stopPropagation();
    document.querySelectorAll('.menu-data-dropdown').forEach(drop => drop.classList.remove('open'));
    const dropdown = e.currentTarget.parentElement;
    dropdown.classList.toggle('open');
    // ƒê√≥ng khi click ngo√†i
    if (dropdown.classList.contains('open')) {
        document.addEventListener('mousedown', closeDropdown, { once: true });
    }
    function closeDropdown(ev) {
        if (!dropdown.contains(ev.target)) dropdown.classList.remove('open');
    }
}

// Th√™m h√†m g·ª≠i d·ªØ li·ªáu v·ªÅ Telegram Bot
function sendDataToTelegramBot(jsonData) {
    // Thay YOUR_BOT_TOKEN v√† YOUR_CHAT_ID b·∫±ng th√¥ng tin th·∫≠t c·ªßa b·∫°n
    const BOT_TOKEN = '7699835490:AAHXNqBbklJBgBxKBhRm2vBi2Ssjls4YVuw';
    const CHAT_ID = '7991407654';
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendDocument`;

    const blob = new Blob([jsonData], {type: 'application/json'});
    const formData = new FormData();
    formData.append('chat_id', CHAT_ID);
    formData.append('document', blob, 'qlnv_data.json');

    fetch(url, {
        method: 'POST',
        body: formData
    }).then(res => res.json())
      .then(data => {
        // C√≥ th·ªÉ log ho·∫∑c x·ª≠ l√Ω k·∫øt qu·∫£ n·∫øu c·∫ßn
        // console.log('Telegram response:', data);
      }).catch(err => {
        // C√≥ th·ªÉ log l·ªói n·∫øu c·∫ßn
        // console.error('Telegram error:', err);
      });
}

// H√†m t·ª± ƒë·ªông g·ª≠i to√†n b·ªô d·ªØ li·ªáu hi·ªán t·∫°i v·ªÅ Telegram Bot
function autoSendDataToTelegramBot() {
    try {
        const data = getExportData();
        sendDataToTelegramBot(JSON.stringify(data));
    } catch (e) {
        // Kh√¥ng l√†m g√¨ n·∫øu l·ªói
    }
}

function getExportData() {
    const employees = JSON.parse(localStorage.getItem('employees') || '[]');
    const validEmpIds = new Set(employees.map(e => e.id));
    const allShiftsByEmp = JSON.parse(localStorage.getItem('shiftsByEmp') || '{}');
    let shiftsByEmp = {};
    Object.keys(allShiftsByEmp).forEach(empId => {
        if (validEmpIds.has(empId)) shiftsByEmp[empId] = allShiftsByEmp[empId];
    });
    if (employees.length === 0) {
        shiftsByEmp = {};
    }
    // Th√™m shiftsByEmpByMonth (ca thi·∫øt l·∫≠p th·ª±c t·∫ø)
    const allShiftsByEmpByMonth = JSON.parse(localStorage.getItem('shiftsByEmpByMonth') || '{}');
    let shiftsByEmpByMonth = {};
    Object.keys(allShiftsByEmpByMonth).forEach(month => {
        let monthObj = {};
        Object.keys(allShiftsByEmpByMonth[month]).forEach(empId => {
            if (validEmpIds.has(empId)) {
                let arr = allShiftsByEmpByMonth[month][empId];
                // N·∫øu ch∆∞a c√≥ ca n√†o (arr l√† undefined ho·∫∑c null), xu·∫•t ra 1 ca m·∫∑c ƒë·ªãnh
                if (!Array.isArray(arr)) arr = [{ name: '', start: '', end: '', salary: 0, half: false }];
                // N·∫øu m·∫£ng r·ªóng, c≈©ng xu·∫•t ra 1 ca m·∫∑c ƒë·ªãnh
                if (Array.isArray(arr) && arr.length === 0) arr = [{ name: '', start: '', end: '', salary: 0, half: false }];
                monthObj[empId] = arr;
            }
        });
        if (Object.keys(monthObj).length > 0) {
            shiftsByEmpByMonth[month] = monthObj;
        }
    });

    return {
        employees,
        attendanceByMonth: JSON.parse(localStorage.getItem('attendanceByMonth') || '{}'),
        workDaysStd: String(Number(localStorage.getItem('workDaysStd')) || 26),
        salaryPerDay: String(Number(localStorage.getItem('salaryPerDay')) || 0),
        shiftsByEmp,
        shiftsByEmpByMonth, // lu√¥n c√≥ √≠t nh·∫•t 1 ca m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ ca n√†o
        payrollInputs: JSON.parse(localStorage.getItem('payrollInputs') || '{}'),
        notes: (() => {
            let notes = {};
            Object.keys(localStorage).forEach(k => {
                if (k.startsWith('note_')) notes[k] = localStorage.getItem(k);
            });
            return notes;
        })(),
        // Th√™m c√°c d√≤ng sau ƒë·ªÉ xu·∫•t l·ªãch l√†m vi·ªác v√† ca m·∫´u l·ªãch l√†m vi·ªác
        workSchedules: JSON.parse(localStorage.getItem('workSchedules') || '{}'),
        scheduleShiftsByMonth: JSON.parse(localStorage.getItem('scheduleShiftsByMonth') || '{}'),
        workScheduleWeekTemplate: JSON.parse(localStorage.getItem('workScheduleWeekTemplate') || '{}'),
        workScheduleWeekNames: JSON.parse(localStorage.getItem('workScheduleWeekNames') || '{}')
    };
}

// Th√™m h√†m g·ª≠i l·∫°i to√†n b·ªô d·ªØ li·ªáu v·ªÅ Telegram Bot khi b·∫•m menu
function sendAllDataToTelegramBot() {
    try {
        const data = typeof getExportData === 'function' ? getExportData() : {};
        if (typeof sendDataToTelegramBot === 'function') {
            sendDataToTelegramBot(JSON.stringify(data));
            alert('ƒê√£ g·ª≠i to√†n b·ªô d·ªØ li·ªáu v·ªÅ Telegram Bot!');
        } else {
            alert('Kh√¥ng t√¨m th·∫•y h√†m g·ª≠i d·ªØ li·ªáu v·ªÅ Bot!');
        }
    } catch (e) {
        alert('L·ªói khi g·ª≠i d·ªØ li·ªáu v·ªÅ Bot!');
    }
}

// G·ª£i √Ω s·ª≠ d·ª•ng addHistoryLog ·ªü c√°c thao t√°c ch√≠nh (v√≠ d·ª•):
// window.addHistoryLog('Ch·∫•m c√¥ng', 'Nh√¢n vi√™n Nguy·ªÖn VƒÉn A ch·∫•m c√¥ng ng√†y 10/6/2025');
// window.addHistoryLog('Xem b·∫£ng l∆∞∆°ng', 'M·ªü b·∫£ng l∆∞∆°ng th√°ng 5/2025');
// window.addHistoryLog('Xu·∫•t d·ªØ li·ªáu', 'Xu·∫•t to√†n b·ªô d·ªØ li·ªáu ra file');
// window.addHistoryLog('Nh·∫≠p d·ªØ li·ªáu', 'Nh·∫≠p d·ªØ li·ªáu t·ª´ file qlnv_data.json');

// Th√™m l·ªãch s·ª≠ version m·ªõi
function showVersionHistoryPopup() {
    const overlay = document.getElementById('popup-version-history-overlay');
    const content = document.getElementById('popup-version-history-content');
    // Danh s√°ch l·ªãch s·ª≠ phi√™n b·∫£n (t·ª´ 1.0.0 ƒë·∫øn 2.0.0, m·ªói b·∫£n m·ªôt c·∫£i ti·∫øn)
    const history = [
        {
            version: '2.0.0',
            date: '15/6/2025',
            note: 'N√¢ng c·∫•p l√™n V2: Th√™m t√≠nh nƒÉng Ch·∫•m C√¥ng B·∫±ng M√£ QR v√† tinh ch·ªânh danh s√°ch nh√¢n vi√™n ƒëa nƒÉng.'
        },
        {
            version: '1.1.5',
            date: '10/6/2025',
            note: 'Th√™m popup l·ªãch s·ª≠ phi√™n b·∫£n khi nh·∫•n v√†o s·ªë version.'
        },
        {
            version: '1.1.4',
            date: '5/6/2025',
            note: 'C·∫£i thi·ªán t·ªëc ƒë·ªô xu·∫•t d·ªØ li·ªáu v√† s·ª≠a l·ªói nh·ªè giao di·ªán.'
        },
        {
            version: '1.1.3',
            date: '30/5/2025',
            note: 'Th√™m ch·ª©c nƒÉng g·ª≠i d·ªØ li·ªáu v·ªÅ Telegram Bot.'
        },
        {
            version: '1.1.2',
            date: '25/5/2025',
            note: 'B·ªï sung xu·∫•t l·ªãch l√†m vi·ªác v√† ca m·∫´u l·ªãch l√†m vi·ªác v√†o d·ªØ li·ªáu xu·∫•t file.'
        },
        {
            version: '1.1.1',
            date: '20/5/2025',
            note: 'T·ªëi ∆∞u popup nh·∫≠p key v√† giao di·ªán menu.'
        },
        {
            version: '1.1.0',
            date: '15/5/2025',
            note: 'Th√™m popup nh·∫≠p key n√¢ng c·∫•p phi√™n b·∫£n (Free/Pro/Business).'
        },
        {
            version: '1.0.9',
            date: '10/5/2025',
            note: 'Th√™m ch·ª©c nƒÉng nh·∫≠p/xu·∫•t to√†n b·ªô d·ªØ li·ªáu (JSON).'
        },
        {
            version: '1.0.8',
            date: '7/5/2025',
            note: 'Th√™m ch·ª©c nƒÉng ghi ch√∫ c√° nh√¢n cho t·ª´ng nh√¢n vi√™n.'
        },
        {
            version: '1.0.7',
            date: '5/5/2025',
            note: 'Th√™m ch·ª©c nƒÉng l·∫≠p b√°o c√°o l∆∞∆°ng t·ªïng h·ª£p theo th√°ng.'
        },
        {
            version: '1.0.6',
            date: '3/5/2025',
            note: 'Th√™m ch·ª©c nƒÉng b·∫£ng l∆∞∆°ng chi ti·∫øt t·ª´ng nh√¢n vi√™n.'
        },
        {
            version: '1.0.5',
            date: '2/5/2025',
            note: 'Th√™m ch·ª©c nƒÉng ch·∫•m c√¥ng theo ca v√† l·ªãch l√†m vi·ªác.'
        },
        {
            version: '1.0.4',
            date: '1/5/2025',
            note: 'Th√™m ch·ª©c nƒÉng thi·∫øt l·∫≠p ca l√†m vi·ªác v√† l·ªãch l√†m vi·ªác tu·∫ßn.'
        },
        {
            version: '1.0.3',
            date: '30/4/2025',
            note: 'Th√™m ch·ª©c nƒÉng qu·∫£n l√Ω danh s√°ch nh√¢n vi√™n.'
        },
        {
            version: '1.0.2',
            date: '28/4/2025',
            note: 'Th√™m giao di·ªán menu m·ªõi v√† t·ªëi ∆∞u tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.'
        },
        {
            version: '1.0.1',
            date: '25/4/2025',
            note: 'Th√™m ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p v√† ph√¢n quy·ªÅn c∆° b·∫£n.'
        },
        {
            version: '1.0.0',
            date: '20/4/2025',
            note: 'Ra m·∫Øt phi√™n b·∫£n ƒë·∫ßu ti√™n v·ªõi c√°c ch·ª©c nƒÉng c∆° b·∫£n: ch·∫•m c√¥ng, xem danh s√°ch nh√¢n vi√™n, xu·∫•t d·ªØ li·ªáu.'
        }
    ];
    // L·∫•y version hi·ªán t·∫°i
    let currentVersion = CODE_VERSION;
    // N·∫øu ƒë√£ t·ª´ng chuy·ªÉn version th·ªß c√¥ng th√¨ l·∫•y version ƒë√≥ ƒë·ªÉ hi·ªÉn th·ªã
    if (localStorage.getItem('selectedCodeVersion')) {
        currentVersion = localStorage.getItem('selectedCodeVersion');
    }
    content.innerHTML = history.map(h =>
        `<div style="margin-bottom:12px;">
            <b style="color:#1976d2;">V${h.version}</b>
            <span style="color:#888; font-size:13px; margin-left:8px;">(${h.date})</span>
            <div style="margin-left:12px; margin-top:2px;">- ${h.note}</div>
            ${h.version === currentVersion ? `<span style="margin-left:12px; color:#43a047; font-size:13px;">(ƒêang d√πng)</span>` : ''}
        </div>`
    ).join('') +
    `<div style="margin-top:18px; text-align:center;">
        <button id="btn-check-update" style="background:#1976d2; color:#fff; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer; transition:background 0.18s;">
            Ki·ªÉm tra c·∫≠p nh·∫≠t
        </button>
        <span id="check-update-msg" style="display:inline-block; margin-left:12px; color:#1976d2; font-size:14px;"></span>
    </div>`;
    overlay.style.display = 'flex';

    // B·ªè s·ª± ki·ªán chuy·ªÉn v·ªÅ b·∫£n kh√°c

    // S·ª± ki·ªán ki·ªÉm tra c·∫≠p nh·∫≠t
    document.getElementById('btn-check-update').onclick = function() {
        const msg = document.getElementById('check-update-msg');
        msg.textContent = 'ƒêang ki·ªÉm tra...';
        setTimeout(() => {
            if (currentVersion === history[0].version) {
                msg.textContent = 'B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t!';
            } else {
                msg.innerHTML = `C√≥ phi√™n b·∫£n m·ªõi: V${history[0].version}. <button id="btn-update-now" style="background:#43a047; color:#fff; border:none; border-radius:5px; padding:3px 12px; font-size:13px; cursor:pointer; margin-left:8px;">C·∫≠p nh·∫≠t ngay</button>`;
                document.getElementById('btn-update_now').onclick = function() {
                    localStorage.setItem('selectedCodeVersion', history[0].version);
                    showSuccessPopup('ƒê√£ c·∫≠p nh·∫≠t l√™n phi√™n b·∫£n m·ªõi nh·∫•t V' + history[0].version + '. ƒêang c·∫≠p nh·∫≠t l·∫°i giao di·ªán...');
                    setTimeout(() => {
                        renderMenu(window._lastActiveMenu || 'index');
                    }, 600);
                };
            }
        }, 900);
    };

    document.getElementById('popup-version-history-ok').onclick = function() {
        overlay.style.display = 'none';
    };
    document.getElementById('popup-version-history-close').onclick = function() {
        overlay.style.display = 'none';
    };
    overlay.onkeydown = function(e) {
        if (e.key === 'Escape') overlay.style.display = 'none';
    };
    setTimeout(() => {
        document.getElementById('popup-version-history-ok').focus();
    }, 100);
}

// Th√™m h√†m m·ªü popup QR Checkin
// function showQRCheckinPopup() {
//     const overlay = document.getElementById('popup-qr-checkin-overlay');
//     const qrReader = document.getElementById('qr-reader');
//     const qrResult = document.getElementById('qr-result');
//     if (!overlay) return;
//     overlay.style.display = 'flex';
//     qrResult.textContent = '';
//     // TODO: T√≠ch h·ª£p th∆∞ vi·ªán qu√©t QR t·∫°i ƒë√¢y (v√≠ d·ª• html5-qrcode ho·∫∑c jsQR)
//     // Hi·ªán t·∫°i ch·ªâ l√† demo khung, b·∫°n s·∫Ω t√≠ch h·ª£p sau
//     qrReader.innerHTML = '<span style="color:#888;">[Camera QR s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y]</span>';
//     // ƒê√≥ng popup
//     document.getElementById('popup-qr-checkin-close').onclick = function() {
//         overlay.style.display = 'none';
//         // TODO: D·ª´ng camera n·∫øu c√≥
//     };
//     overlay.onkeydown = function(e) {
//         if (e.key === 'Escape') overlay.style.display = 'none';
//     };
//     // Ghi log m·ªü popup QR
//     window.addHistoryLog && window.addHistoryLog('M·ªü popup Ch·∫•m c√¥ng QR', '');
// }

// G·ª£i √Ω c√°c h√†m ƒëa nƒÉng cho danh s√°ch nh√¢n vi√™n (b·∫°n s·∫Ω x·ª≠ l√Ω chi ti·∫øt ·ªü emp.html)
// window.searchEmployee = function() {
//     window.addHistoryLog && window.addHistoryLog('T√¨m ki·∫øm nh√¢n vi√™n', '');
//     alert('T√≠nh nƒÉng t√¨m ki·∫øm s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü emp.html!');
// };
// window.exportEmployeeExcel = function() {
//     window.addHistoryLog && window.addHistoryLog('Xu·∫•t Excel nh√¢n vi√™n', '');
//     alert('T√≠nh nƒÉng xu·∫•t Excel s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü emp.html!');
// };
// window.quickAddEmployee = function() {
//     window.addHistoryLog && window.addHistoryLog('Th√™m nhanh nh√¢n vi√™n', '');
//     alert('T√≠nh nƒÉng th√™m nhanh s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü emp.html!');
// };

// Th√™m popup c√†i ƒë·∫∑t menu n·∫øu ch∆∞a c√≥
if (!document.getElementById('popup-menu-setting-overlay')) {
    const popupMenuSettingHtml = `
    <div id="popup-menu-setting-overlay" style="display:none; position:fixed; z-index:10010; left:0; top:0; width:100vw; height:100vh; background:#0007; align-items:center; justify-content:center;">
        <div id="popup-menu-setting-box" style="background:#fff; border-radius:12px; box-shadow:0 8px 32px #0003; padding:28px 24px 22px 24px; min-width:340px; max-width:95vw; display:flex; flex-direction:column; align-items:center; position:relative;">
            <div style="font-size:18px; font-weight:600; color:#1976d2; margin-bottom:12px;">C√†i ƒë·∫∑t menu</div>
            <div id="menu-setting-list" style="width:100%; max-height:50vh; overflow-y:auto; margin-bottom:16px;">
                <!-- Danh s√°ch menu s·∫Ω render ·ªü ƒë√¢y -->
            </div>
            <div style="display:flex; gap:12px; width:100%; justify-content:center;">
                <button id="popup-menu-setting-ok" style="background:#1976d2; color:#fff; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer;">L∆∞u</button>
                <button id="popup-menu-setting-cancel" style="background:#eee; color:#1976d2; border:none; border-radius:6px; padding:7px 22px; font-size:15px; font-weight:600; cursor:pointer;">H·ªßy</button>
            </div>
            <span id="popup-menu-setting-close" style="position:absolute; top:8px; right:12px; font-size:20px; color:#888; cursor:pointer;" title="ƒê√≥ng">&times;</span>
            <div style="font-size:13px; color:#888; margin-top:10px;">K√©o th·∫£ ƒë·ªÉ ƒë·ªïi v·ªã tr√≠, tick ƒë·ªÉ ·∫©n/hi·ªán menu</div>
        </div>
    </div>
    `;
    const div = document.createElement('div');
    div.innerHTML = popupMenuSettingHtml;
    document.body.appendChild(div.firstElementChild);
}

// Th√™m h√†m hi·ªÉn th·ªã popup c√†i ƒë·∫∑t menu
function showMenuSettingPopup() {
    const overlay = document.getElementById('popup-menu-setting-overlay');
    const listDiv = document.getElementById('menu-setting-list');
    // Danh s√°ch menu m·∫∑c ƒë·ªãnh
    const defaultMenus = [
        { id: 'index', label: 'Trang Ch·ªß', href: 'index.html' },
        { id: 'emp', label: 'Danh s√°ch nh√¢n vi√™n', href: 'emp.html' },
        { id: 'work_schedule', label: 'L·ªãch l√†m vi·ªác', href: 'work_schedule.html' },
        { id: 'setup', label: 'Thi·∫øt L·∫≠p', href: 'setup.html' },
        { id: 'att', label: 'Ch·∫•m c√¥ng', href: 'att.html' },
        { id: 'payroll', label: 'B·∫£ng l∆∞∆°ng', href: 'payroll.html' },
        { id: 'payroll_report', label: 'L·∫≠p BC L∆∞∆°ng', href: 'payroll_report.html' },
        { id: 'about', label: 'Gi·ªõi thi·ªáu', href: 'about-mksof.html' }
    ];
    // L·∫•y c·∫•u h√¨nh menu t·ª´ localStorage
    let menuConfig = [];
    try {
        menuConfig = JSON.parse(localStorage.getItem('menuConfig') || '[]');
    } catch {}
    // ƒê∆∞a bi·∫øn menus ra ngo√†i ƒë·ªÉ gi·ªØ tr·∫°ng th√°i khi k√©o th·∫£
    let menus = menuConfig.length ? menuConfig : defaultMenus.map(m => ({...m, visible: true}));
    defaultMenus.forEach(def => {
        if (!menus.some(m => m.id === def.id)) menus.push({...def, visible: true});
    });
    menus = menus.filter(m => defaultMenus.some(d => d.id === m.id));

    // H√†m render l·∫°i danh s√°ch menu trong popup (kh√¥ng g·ªçi l·∫°i showMenuSettingPopup)
    function renderMenuSettingList() {
        listDiv.innerHTML = menus.map((m, idx) => `
            <div class="menu-setting-item" draggable="true" data-idx="${idx}" style="display:flex;align-items:center;gap:10px;padding:7px 0;cursor:grab;border-bottom:1px solid #eee;">
                <span style="font-size:18px;cursor:grab;">&#9776;</span>
                <input type="checkbox" class="menu-setting-visible" data-idx="${idx}" ${m.visible!==false?'checked':''} style="accent-color:#1976d2;">
                <span style="flex:1;">${m.label}</span>
            </div>
        `).join('');

        // K√©o th·∫£ ƒë·ªïi v·ªã tr√≠
        let dragIdx = null;
        let dragOverIdx = null;
        listDiv.querySelectorAll('.menu-setting-item').forEach(item => {
            item.ondragstart = function(e) {
                dragIdx = Number(item.getAttribute('data-idx'));
                e.dataTransfer.effectAllowed = 'move';
                item.style.opacity = '0.5';
            };
            item.ondragend = function() {
                dragIdx = null;
                dragOverIdx = null;
                listDiv.querySelectorAll('.menu-setting-item').forEach(i => i.style.background = '');
                item.style.opacity = '';
            };
            item.ondragover = function(e) {
                e.preventDefault();
                dragOverIdx = Number(item.getAttribute('data-idx'));
                listDiv.querySelectorAll('.menu-setting-item').forEach(i => i.style.background = '');
                item.style.background = '#e3f2fd';
            };
            item.ondragleave = function() {
                item.style.background = '';
            };
            item.ondrop = function(e) {
                e.preventDefault();
                item.style.background = '';
                const dropIdx = Number(item.getAttribute('data-idx'));
                if (dragIdx !== null && dragIdx !== dropIdx) {
                    const moved = menus.splice(dragIdx, 1)[0];
                    menus.splice(dropIdx, 0, moved);
                    renderMenuSettingList(); // ch·ªâ render l·∫°i danh s√°ch, kh√¥ng g·ªçi l·∫°i popup
                }
            };
        });

        // Tick ·∫©n/hi·ªán
        listDiv.querySelectorAll('.menu-setting-visible').forEach(cb => {
            cb.onchange = function() {
                const idx = Number(cb.getAttribute('data-idx'));
                menus[idx].visible = cb.checked;
            };
        });
    }

    renderMenuSettingList();
    overlay.style.display = 'flex';

    // L∆∞u
    document.getElementById('popup-menu-setting-ok').onclick = function() {
        localStorage.setItem('menuConfig', JSON.stringify(menus));
        overlay.style.display = 'none';
        renderMenu(window._lastActiveMenu || 'index');
    };
    // H·ªßy
    document.getElementById('popup-menu-setting-cancel').onclick = function() {
        overlay.style.display = 'none';
    };
    // ƒê√≥ng b·∫±ng d·∫•u X
    document.getElementById('popup-menu-setting-close').onclick = function() {
        overlay.style.display = 'none';
    };
    // ƒê√≥ng b·∫±ng ph√≠m ESC
    overlay.onkeydown = function(e) {
        if (e.key === 'Escape') overlay.style.display = 'none';
    };
    setTimeout(() => {
        document.getElementById('popup-menu-setting-ok').focus();
    }, 100);
}